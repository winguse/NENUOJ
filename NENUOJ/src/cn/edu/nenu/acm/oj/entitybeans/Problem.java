package cn.edu.nenu.acm.oj.entitybeans;

// Generated 2013-1-16 11:45:31 by Hibernate Tools 4.0.0

import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Problem generated by hbm2java
 */
@Entity
@Table(name = "problem", catalog = "nenuoj")
public class Problem implements java.io.Serializable {

	private Integer id;
	private Message message;
	private Judger judger;
	private String title;
	private String number;
	private boolean locked;
	private int timeLimit;
	private int memoryLimit;
	private int accepted;
	private int submitted;
	private int judgingType;
	private Date lastUpdateTime;
	private Serializable remark;
	private Set<Solution> solutions = new HashSet<Solution>(0);
	private Set<Tag> tags = new HashSet<Tag>(0);
	private Set<ProblemDescription> problemDescriptions = new HashSet<ProblemDescription>(
			0);

	public Problem() {
	}

	public Problem(Judger judger, String title, String number, boolean locked,
			int timeLimit, int memoryLimit, int accepted, int submitted,
			int judgingType, Date lastUpdateTime) {
		this.judger = judger;
		this.title = title;
		this.number = number;
		this.locked = locked;
		this.timeLimit = timeLimit;
		this.memoryLimit = memoryLimit;
		this.accepted = accepted;
		this.submitted = submitted;
		this.judgingType = judgingType;
		this.lastUpdateTime = lastUpdateTime;
	}

	public Problem(Message message, Judger judger, String title, String number,
			boolean locked, int timeLimit, int memoryLimit, int accepted,
			int submitted, int judgingType, Date lastUpdateTime,
			Serializable remark, Set<Solution> solutions, Set<Tag> tags,
			Set<ProblemDescription> problemDescriptions) {
		this.message = message;
		this.judger = judger;
		this.title = title;
		this.number = number;
		this.locked = locked;
		this.timeLimit = timeLimit;
		this.memoryLimit = memoryLimit;
		this.accepted = accepted;
		this.submitted = submitted;
		this.judgingType = judgingType;
		this.lastUpdateTime = lastUpdateTime;
		this.remark = remark;
		this.solutions = solutions;
		this.tags = tags;
		this.problemDescriptions = problemDescriptions;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "message_id")
	public Message getMessage() {
		return this.message;
	}

	public void setMessage(Message message) {
		this.message = message;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "judger_id", nullable = false)
	public Judger getJudger() {
		return this.judger;
	}

	public void setJudger(Judger judger) {
		this.judger = judger;
	}

	@Column(name = "title", nullable = false, length = 128)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "number", nullable = false, length = 128)
	public String getNumber() {
		return this.number;
	}

	public void setNumber(String number) {
		this.number = number;
	}

	@Column(name = "locked", nullable = false)
	public boolean isLocked() {
		return this.locked;
	}

	public void setLocked(boolean locked) {
		this.locked = locked;
	}

	@Column(name = "time_limit", nullable = false)
	public int getTimeLimit() {
		return this.timeLimit;
	}

	public void setTimeLimit(int timeLimit) {
		this.timeLimit = timeLimit;
	}

	@Column(name = "memory_limit", nullable = false)
	public int getMemoryLimit() {
		return this.memoryLimit;
	}

	public void setMemoryLimit(int memoryLimit) {
		this.memoryLimit = memoryLimit;
	}

	@Column(name = "accepted", nullable = false)
	public int getAccepted() {
		return this.accepted;
	}

	public void setAccepted(int accepted) {
		this.accepted = accepted;
	}

	@Column(name = "submitted", nullable = false)
	public int getSubmitted() {
		return this.submitted;
	}

	public void setSubmitted(int submitted) {
		this.submitted = submitted;
	}

	@Column(name = "judging_type", nullable = false)
	public int getJudgingType() {
		return this.judgingType;
	}

	public void setJudgingType(int judgingType) {
		this.judgingType = judgingType;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_update_time", nullable = false, length = 19)
	public Date getLastUpdateTime() {
		return this.lastUpdateTime;
	}

	public void setLastUpdateTime(Date lastUpdateTime) {
		this.lastUpdateTime = lastUpdateTime;
	}

	@Column(name = "remark")
	public Serializable getRemark() {
		return this.remark;
	}

	public void setRemark(Serializable remark) {
		this.remark = remark;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "problem")
	public Set<Solution> getSolutions() {
		return this.solutions;
	}

	public void setSolutions(Set<Solution> solutions) {
		this.solutions = solutions;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "problem_has_tag", catalog = "nenuoj", joinColumns = { @JoinColumn(name = "problem_id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "tag_id", nullable = false, updatable = false) })
	public Set<Tag> getTags() {
		return this.tags;
	}

	public void setTags(Set<Tag> tags) {
		this.tags = tags;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "problem")
	public Set<ProblemDescription> getProblemDescriptions() {
		return this.problemDescriptions;
	}

	public void setProblemDescriptions(
			Set<ProblemDescription> problemDescriptions) {
		this.problemDescriptions = problemDescriptions;
	}

}
